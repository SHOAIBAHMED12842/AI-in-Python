{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as calgraph\n",
    "import time\n",
    "import sys\n",
    "def main():\n",
    "    sys.setrecursionlimit(50000)\n",
    "    print(\"Welcome!\\n1. Open\\n2. High\\n3. Low\\n4. Close\")\n",
    "    print(\"Enter your choice :\")\n",
    "    dataset=pd.read_csv(\"data.csv\")\n",
    "    \n",
    "    arr_time1 = [0]\n",
    "    arr_time2 = [0]\n",
    "    arr_time3 = [0]\n",
    "    \n",
    "    arr_size1 = [0]\n",
    "    arr_size2 = [0]\n",
    "    arr_size3 = [0]\n",
    "    \n",
    "    user_data =  int (input())\n",
    "    if (user_data ==1):\n",
    "        arraydata= dataset[:1].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,2]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        calgraph.safigure(figsize=(8,5))\n",
    "        calgraph.title(' Insertion Sort vs Quick Sort vs Merge Sort', fontdict={'fontweight':'bold', 'fontsize': 18})\n",
    "        calgraph.plot(arr_size1, arr_time1, color='blue', label='INSERTION')\n",
    "        calgraph.plot(arr_size2, arr_time2, color='yellow', label='QUICK')\n",
    "        calgraph.plot(arr_size3, arr_time3, color='green',label='MERGE')\n",
    "        calgraph.xlabel('N')\n",
    "        calgraph.ylabel('Time (s)')\n",
    "        calgraph.legend()\n",
    "        calgraph.savefig('graph.png', dpi=300)\n",
    "        print(\"Have a nice day!\")\n",
    "        \n",
    "        \n",
    "        \n",
    "    elif (user_data ==2):\n",
    "        \n",
    "        arraydata= dataset[:1].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,3]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        calgraph.safigure(figsize=(8,5))\n",
    "        calgraph.title(' Insertion Sort vs Quick Sort vs Merge Sort', fontdict={'fontweight':'bold', 'fontsize': 18})\n",
    "        calgraph.plot(arr_size1, arr_time1, color='blue', label='INSERTION')\n",
    "        calgraph.plot(arr_size2, arr_time2, color='yellow', label='QUICK')\n",
    "        calgraph.plot(arr_size3, arr_time3, color='green',label='MERGE')\n",
    "        calgraph.xlabel('N')\n",
    "        calgraph.ylabel('Time (s)')\n",
    "        calgraph.legend()\n",
    "        calgraph.savefig('graph.png', dpi=300)\n",
    "        print(\"Have a nice day!\")\n",
    "        \n",
    "        \n",
    "    elif (user_daa == 3 ):\n",
    "        \n",
    "        arraydata= dataset[:1].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,4]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        calgraph.safigure(figsize=(8,5))\n",
    "        calgraph.title(' Insertion Sort vs Quick Sort vs Merge Sort', fontdict={'fontweight':'bold', 'fontsize': 18})\n",
    "        calgraph.plot(arr_size1, arr_time1, color='blue', label='INSERTION')\n",
    "        calgraph.plot(arr_size2, arr_time2, color='yellow', label='QUICK')\n",
    "        calgraph.plot(arr_size3, arr_time3, color='green',label='MERGE')\n",
    "        calgraph.xlabel('N')\n",
    "        calgraph.ylabel('Time (s)')\n",
    "        calgraph.legend()\n",
    "        calgraph.savefig('graph.png', dpi=300)\n",
    "        print(\"Have a nice day!\")\n",
    "        \n",
    "        \n",
    "    elif (user_data == 4):\n",
    "        \n",
    "        arraydata= dataset[:1].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        insertionSort(data)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size1.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time1.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        quickSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time2.append(finsh-begins)\n",
    "        arr_size2.append(n)\n",
    "        \n",
    "        arraydata= dataset[:100].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:1000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:5000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:10000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:15000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:20000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:25000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:30000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:35000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:40000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:45000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        arraydata= dataset[:50000].values\n",
    "        data=arraydata[:,5]\n",
    "        n=len(data)\n",
    "        begins = time.time()\n",
    "        mergeSort(data,0,n-1)\n",
    "        finsh = time.time()\n",
    "        arr_time3.append(finsh-begins)\n",
    "        arr_size3.append(n)\n",
    "        \n",
    "        calgraph.safigure(figsize=(8,5))\n",
    "        calgraph.title(' Insertion Sort vs Quick Sort vs Merge Sort', fontdict={'fontweight':'bold', 'fontsize': 18})\n",
    "        calgraph.plot(arr_size1, arr_time1, color='blue', label='INSERTION')\n",
    "        calgraph.plot(arr_size2, arr_time2, color='yellow', label='QUICK')\n",
    "        calgraph.plot(arr_size3, arr_time3, color='green',label='MERGE')\n",
    "        calgraph.xlabel('N')\n",
    "        calgraph.ylabel('Time (s)')\n",
    "        calgraph.legend()\n",
    "        calgraph.savefig('graph.png', dpi=300)\n",
    "        print(\"Have a nice day!\")\n",
    "        \n",
    "        \n",
    "    else:\n",
    "        print(\"invalid Input\")\n",
    "    \n",
    "    def mergeSort(arr,l,r): \n",
    "        if l < r: \n",
    "            m = (l+(r-1))//2\n",
    "            mergeSort(arr, l, m) \n",
    "            mergeSort(arr, m+1, r) \n",
    "            merge(arr, l, m, r) \n",
    "        \n",
    "        def merge(arr, l, m, r): \n",
    "            n1 = m - l + 1\n",
    "            n2 = r- m \n",
    "            L = [0] * (n1) \n",
    "            R = [0] * (n2) \n",
    "            for i in range(0 , n1): \n",
    "                L[i] = arr[l + i] \n",
    "                for j in range(0 , n2): \n",
    "                    R[j] = arr[m + 1 + j] \n",
    "                    i = 0      \n",
    "                    j = 0     \n",
    "                    k = l     \n",
    "            \n",
    "            while i < n1 and j < n2 : \n",
    "                if L[i] <= R[j]: \n",
    "                    arr[k] = L[i] \n",
    "                    i += 1\n",
    "                else: \n",
    "                    arr[k] = R[j] \n",
    "                    j += 1\n",
    "                    k += 1\n",
    "            \n",
    "            while i < n1:\n",
    "                arr[k] = L[i] \n",
    "                i += 1\n",
    "                k += 1\n",
    "            \n",
    "            while j < n2:\n",
    "                arr[k] = R[j] \n",
    "                j += 1\n",
    "                k += 1\n",
    "                \n",
    "        def quickSort(arr,low,high):\n",
    "            if low < high:\n",
    "                pi = partition(arr,low,high)\n",
    "                quickSort(arr, low, pi-1)\n",
    "                quickSort(arr, pi+1, high)\n",
    "        \n",
    "        def partition(arr,low,high):\n",
    "            i = ( low-1 )        \n",
    "            pivot = arr[high]    \n",
    "            \n",
    "            for j in range(low , high):\n",
    "                if   arr[j] <= pivot:\n",
    "                    i = i+1\n",
    "                    arr[i],arr[j] = arr[j],arr[i]\n",
    "                    arr[i+1],arr[high] = arr[high],arr[i+1]\n",
    "        return ( i+1 )\n",
    "        \n",
    "        def insertionSort(arr): \n",
    "            for i in range(1, len(arr)):\n",
    "                key = arr[i] \n",
    "                j = i-1\n",
    "                while j >= 0 and key < arr[j] : \n",
    "                    arr[j + 1] = arr[j] \n",
    "                    j -= 1\n",
    "                    arr[j + 1] = key \n",
    "def main():                \n",
    "    if __name__ == \"__main__\":\n",
    "        main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
